--- 
# eCom-YAML-Document
#
# This document contains the following main-keys:
#   -Sections 
#   -Intro 
#   -FlowChart 
#   -Outro
#   -SwaggerURL : the url to the swagger for this API (json)
#
# Sections:
#   Contains the sections that is to be displayed
#   and their subsections
#   The subsections contains the following:
#       -title 
#       -introduction 
#       -endpoints      : A list of endpoints for -This- step, 
#       -keywords       : The supplied text-fields for this subsection will be parsed for >> [text keyword]
#
#   Note:
#       keywords is used to create a popup on the page displaying some additional information
#       This includes both the subsection introduction, and the endpoint descriptions.
#       The keywords looks like this in the text: [example word] or [phrase]
#       keywords might not be needed and can be left empty
#       
#       keywords:
#           example word: ##The word or phrase it will try to match in the text fields
#               title: example title
#               description: example description
#               linkTitle:  example link title
#               link: http://www.example.com/more 
#
#       Also, here is the internal fields of a endpoint:
#       endpoints:
#           contains: 
#               -name[endpoint swagger name], 
#               -description, 
#               -mode[GET/POST/PUT/...]
#       
# Intro:
#   contains:
#       -title
#       -introduction
#       -description        : something important, f.ex: dev portal to get keys or simmilar
#       -descriptiontwo     : some explanation of what this page contains, f.ex: payment process, eCom API introduction
#       -imagePath          : an optional image
#
# FlowChart:
#   This is completely optional
#   But it sould give a quick overview of the following steps that will come in the Sections
#   contains:
#       -title
#       -browserImage
#       -tabletImage
#       -mobileImage
#
#   Note:
#       The images can also be set to: false
#       and we will pick from the ones avaliable
#       They are chosen based on screen width, to make the content feel at home on different devices
#
# Outro:
#   contains:
#       -title          : something about finishing the introduction
#       -description    : You're ready to move forward to the documentation
#       -imagePath      : link to fitting image, f.ex: ../../assets/ecom-illustrations/jumpingMan.svg
#       -link           : The link to the documentation page
#

SwaggerURL: "https://raw.githubusercontent.com/vippsas/vipps-ecom-api/master/docs/swagger.json"

Intro:
    title: Vipps eCom API
    introduction: Understanding how the process of online payments works
    description: >
        Before implementing the Vipps eCom API, 
        you’ll need to get keys for testing and production through the developer portal. 
        Look here for how to get started. 
    descriptiontwo: >
        Also, you should know how the payment process works. 
        Underneath is a stepwise description of the payment process, 
        including the customer, 
        the Vipps eCom API and your website.
    imagePath: "../../assets/images/womanWithPhone.svg"

FlowChart:
    title: Steps to implement for eCom
    browserImage: "../../assets/ecom-illustrations/ecom-flowchart2.svg"
    tabletImage: "../../assets/ecom-illustrations/ecom-flowchart2.svg"
    mobileImage: "../../assets/ecom-illustrations/ecom-flow-mobile.svg"
    
Sections:
    Prerequisites:
        access_token:
            title: Get access token
            introduction: >
                In order to make API calls to Vipps, you need a valid [access token]. 
                This token has to be renewned every 24 hours.
            endpoints:
                - name: /accesstoken/get
                  description: Initiate a request to Vipps to retrieve the access token.
                  mode: POST
            responses: true
            keywords:
                access token:
                    title: What is an access token?
                    description : >
                        A token is an object which represents the right to perform some operation. 
                        An access token, is a system object representing the subject of access control operations. 
                        All API calls are authenticated and authorized based on the application access token (JWT bearer token).
                    linkTitle: API documentation
                    link: /documentation/ecommerce/#authentication

        endpoints:
            title: Set up endpoints
            introduction: >
                To let Vipps send and receive information from you, 
                you need to implement [endpoints] at your [backend]. 
                They make it possible for you to for example get transaction updates and provide shipping details.
            endpoints:
                - name: "[callbackPrefix]/v2/payments/{orderId}"
                  mode: POST
                  description: >
                    Gets called when there is an transaction update for an order. 
                    The callback prefix is the endpoint at your backend where Vipps will send this information to. 
                    You have to check this for updates during the payment process, we'll guide you through it.
                  
                
                - name: "[shippingDetailsPrefix]/v2/payments/{orderId}/shippingDetails"
                  mode: POST
                  description: >
                    A way for you to provide shipping details for your orders. 
                    The shipping details prefix is the endpoint at your backend 
                    where Vipps can get shipping details for a given order. 
                    The header will inlcude the order ID.
                  
                 
                - name: "[consentRemovalPrefix]/v2/consents/{userId}"
                  mode: DELETE
                  description: >
                    If the user has notifed Vipps that they want their personal information removed from your site, 
                    their data has to be deleted permanently according to GDPR. 
                    The consent removal prefix is the endpoint at your backend where Vipps will issue this request.
                  
                   
            keywords:
                backend:
                    title: What is a backend?
                    description: >
                        A backend is the machinery under the hood of your website. 
                        It can for example take care of the customer registry and orders you've received. 
                    linkTitle: How to set up a backend at your website
                    link: https://facebook.github.io/create-react-app/docs/integrating-with-an-api-backend
                endpoints:
                    title: What is an endpoint?
                    description: >
                        An endpoint is just a way for you to get information from Vipps at your backend. 
                        Think of it like your mailbox which Vipps can send letters to.
                    linkTitle: How to set up an endpoint
                    link: https://facebook.github.io/create-react-app/docs/integrating-with-an-api-backend


    The payment process:
        initate:
            title: Customer chooses to pay with Vipps
            introduction: The customer is now selecting a service or item at your webstore, and wants to pay with Vipps. 
            imagePath: ../../assets/ecom-illustrations/initiatePayment.svg
            endpoints:
                - name: "/ecomm/v2/payments"
                  mode: POST
                  description: >
                    Send a request to Vipps to initiate the payment. 
                    Once the transaction is successfully initiated in Vipps, 
                    you will receive a URL in response which you can direct 
                    the customer to the [Vipps landing page] with. 
                    You need to provide a [fallbackURL] to you site which 
                    the customer will return to after confirming in the Vipps app. 
                    Passing ‘isApp’ as true will make Vipps respond with an [app-switch deeplink] 
                    that can take the customer directly to the Vipps app.
                  
            keywords:
                Vipps landing page:
                    title: What is the Vipps landing page?
                    description: The Vipps landing page provides a consistent and recognizable user experience, that helps guide the user through the payment flow. In this way Vipps takes responsibility for helping the user from the browser to the app, and to complete the payment in a familiar way.
                    linkTitle: API Documentation
                    link: /documentation/ecommerce/#initiate-payment 
                fallbackURL:
                    title: What is the fallback URL?
                    description: An URL on your site that the customer willl be redirected to after they have confirmed the payment in the Vipps app, which makes it possible for you to provide an order confirmation or a receipt. 
                    linkTitle: API Documentation
                    link: /documentation/ecommerce/#initiate-payment 
                app-switch deeplink:
                    title: What is app-switch?
                    description: If you are implementing Vipps in an iOS or Android App, you can – with the help of the app-switch deeplink – guide your customers directly towards the Vipps app to make a more streamlined experience.
                    linkTitle: API Documentation
                    link: /documentation/ecommerce/#initiate-payment


        customer_confirms:
            title: Customer confirms
            introduction: >
                The customer is now being taken to the landing page and will confirm the 
                [reservation of the payment] in the Vipps app. 
            imagePath: ../../assets/ecom-illustrations/customerConfirms.svg
            endpoints:
                - name: "[callbackPrefix]/v2/payments/{orderId}"
                  mode: POST
                  description: > 
                    You have to check if the reservation of the payment was successful before doing anything else. 
                    This is where the endpoint for transaction updates comes into the picture. 
                    You'll have to check the information you get passed there to see if 
                    the status is 'reserve' as in the example to the right.
                    
            keywords:
                reservation of the payment:
                    title: Reservation of the payment 
                    description: According to Norwegian law, the seller may only reserve the amount in the buyer's account until the item is sent or service is delivered. This money will not be available to the buyer, but remain in the buyer’s possession.
                    linkTitle: API Documentation
                    link: /documentation/ecommerce/#reserve

        ship_item:
            title: Confirm order and send item
            introduction: > 
                Now, you'll have to provide the customer with a confirmation 
                of that you’ve been given the order and that payment is reserved. 
                Next step is delivering the service or shipping the items ordered from the customer.
                
            imagePath: ../../assets/ecom-illustrations/confirmOrder.svg
            endpoints:
            keywords:

        capture:
            title: Withdraw payment
            introduction: >
                Up to this point, the payment is only reserved. 
                According to Norwegian law, you can't withdraw money before the services are delivered 
                or the items are shipped. This is called a capture.
            imagePath: ../../assets/ecom-illustrations/capture2.svg
            endpoints:
                - name: "/ecomm/v2/payments/{orderId}/capture"
                  mode: POST
                  description: You send a capture request to Vipps so the money can be withdrawn from the buyer's account.
                  
            keywords:

    Important to implement:
        cancellation:
            title: Cancellation of payment
            introduction: >
                If you as the seller can't deliver the ordered service or the item isn't in stock, 
                you can send a cancel message to Vipps in order to free up the reservation of the payment.
                
            imagePath: ../../assets/ecom-illustrations/cancel.svg
            endpoints:
                - name: "/ecomm/v2/payments/{orderId}/cancel"
                  mode: PUT
                  description: Send a request to Vipps for cancellation. The money will be availabe for the buyer.		
                  
            keywords:

        refund:
            title: Refund
            introduction: >
                If the customer wants a refund, 
                you’ll have to send a refund request to Vipps. 
                A refund can be either partial or full.
                
            imagePath: ../../assets/ecom-illustrations/refund.svg
            endpoints:
                - name: /ecomm/v2/payments/{orderId}/refund
                  mode: POST
                  description: >
                    You initiate the refund by sending information as serial number, 
                    amount and transaction text.
                    
            keywords:

Outro:
    title: Great! Now you know how the payment process works
    description: You're ready to move forward to the documentation
    imagePath: ../../assets/ecom-illustrations/jumpingMan.svg
    link: /documentation/ecommerce/